/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Geometry } from './Geometry';
import {
    GeometryFromJSON,
    GeometryFromJSONTyped,
    GeometryToJSON,
} from './Geometry';
import type { PlusCode } from './PlusCode';
import {
    PlusCodeFromJSON,
    PlusCodeFromJSONTyped,
    PlusCodeToJSON,
} from './PlusCode';

/**
 * Place model
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    businessStatus: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    formattedAddress: string;
    /**
     * 
     * @type {Geometry}
     * @memberof Place
     */
    geometry: Geometry;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    iconBackgroundColor: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    iconMaskBaseUri: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    placeId: string;
    /**
     * 
     * @type {PlusCode}
     * @memberof Place
     */
    plusCode: PlusCode;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    reference: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Place
     */
    types: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    userRatingsTotal: number;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    priceLevel?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    rating?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    reservationUrl?: string | null;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "businessStatus" in value;
    isInstance = isInstance && "formattedAddress" in value;
    isInstance = isInstance && "geometry" in value;
    isInstance = isInstance && "iconBackgroundColor" in value;
    isInstance = isInstance && "iconMaskBaseUri" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "placeId" in value;
    isInstance = isInstance && "plusCode" in value;
    isInstance = isInstance && "reference" in value;
    isInstance = isInstance && "types" in value;
    isInstance = isInstance && "userRatingsTotal" in value;

    return isInstance;
}

export function PlaceFromJSON(json: any): Place {
    return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Place {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'businessStatus': json['business_status'],
        'formattedAddress': json['formatted_address'],
        'geometry': GeometryFromJSON(json['geometry']),
        'iconBackgroundColor': json['icon_background_color'],
        'iconMaskBaseUri': json['icon_mask_base_uri'],
        'name': json['name'],
        'placeId': json['place_id'],
        'plusCode': PlusCodeFromJSON(json['plus_code']),
        'reference': json['reference'],
        'types': json['types'],
        'userRatingsTotal': json['user_ratings_total'],
        'priceLevel': !exists(json, 'price_level') ? undefined : json['price_level'],
        'rating': !exists(json, 'rating') ? undefined : json['rating'],
        'reservationUrl': !exists(json, 'reservation_url') ? undefined : json['reservation_url'],
    };
}

export function PlaceToJSON(value?: Place | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'business_status': value.businessStatus,
        'formatted_address': value.formattedAddress,
        'geometry': GeometryToJSON(value.geometry),
        'icon_background_color': value.iconBackgroundColor,
        'icon_mask_base_uri': value.iconMaskBaseUri,
        'name': value.name,
        'place_id': value.placeId,
        'plus_code': PlusCodeToJSON(value.plusCode),
        'reference': value.reference,
        'types': value.types,
        'user_ratings_total': value.userRatingsTotal,
        'price_level': value.priceLevel,
        'rating': value.rating,
        'reservation_url': value.reservationUrl,
    };
}

