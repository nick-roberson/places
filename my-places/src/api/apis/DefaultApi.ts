/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIKey,
  HTTPValidationError,
  Place,
} from '../models/index';
import {
    APIKeyFromJSON,
    APIKeyToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PlaceFromJSON,
    PlaceToJSON,
} from '../models/index';

export interface AddAddPostRequest {
    name: string;
    location: string;
}

export interface GetOneGetNameGetRequest {
    name: string;
    exact?: boolean;
}

export interface SearchSearchGetRequest {
    name?: string | null;
    address?: string | null;
    minRating?: number | null;
    exact?: boolean;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add a restaurant to the database.  Args:     name (str): Name of the restaurant     location (str): Address of the restaurant
     * Add
     */
    async addAddPostRaw(requestParameters: AddAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Place>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling addAddPost.');
        }

        if (requestParameters.location === null || requestParameters.location === undefined) {
            throw new runtime.RequiredError('location','Required parameter requestParameters.location was null or undefined when calling addAddPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.location !== undefined) {
            queryParameters['location'] = requestParameters.location;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceFromJSON(jsonValue));
    }

    /**
     * Add a restaurant to the database.  Args:     name (str): Name of the restaurant     location (str): Address of the restaurant
     * Add
     */
    async addAddPost(requestParameters: AddAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Place> {
        const response = await this.addAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all restaurants.
     * Get All
     */
    async getAllAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Place>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaceFromJSON));
    }

    /**
     * Get all restaurants.
     * Get All
     */
    async getAllAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Place>> {
        const response = await this.getAllAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the Google api key.
     * Get Google Api Key
     */
    async getGoogleApiKeyKeysGoogleGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKey>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/keys/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyFromJSON(jsonValue));
    }

    /**
     * Get the Google api key.
     * Get Google Api Key
     */
    async getGoogleApiKeyKeysGoogleGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKey> {
        const response = await this.getGoogleApiKeyKeysGoogleGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get one restaurant by name  Args:     name (str): Name of the restaurant to get     exact (bool, optional): Exact match for name. Defaults to False.
     * Get One
     */
    async getOneGetNameGetRaw(requestParameters: GetOneGetNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Place>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getOneGetNameGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/get/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceFromJSON(jsonValue));
    }

    /**
     * Get one restaurant by name  Args:     name (str): Name of the restaurant to get     exact (bool, optional): Exact match for name. Defaults to False.
     * Get One
     */
    async getOneGetNameGet(requestParameters: GetOneGetNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Place> {
        const response = await this.getOneGetNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Root
     */
    async readRootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Read Root
     */
    async readRootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readRootGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search for a restaurant by name.  Args:     name (str, optional): Name of the restaurant to lookup. Defaults to None.     address (str, optional): Address of the restaurant to lookup. Defaults to None.     min_rating (float, optional): Minimum rating for the restaurant. Defaults to None.     exact (bool, optional): Exact match for name. Defaults to False.
     * Search
     */
    async searchSearchGetRaw(requestParameters: SearchSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Place>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.minRating !== undefined) {
            queryParameters['min_rating'] = requestParameters.minRating;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaceFromJSON));
    }

    /**
     * Search for a restaurant by name.  Args:     name (str, optional): Name of the restaurant to lookup. Defaults to None.     address (str, optional): Address of the restaurant to lookup. Defaults to None.     min_rating (float, optional): Minimum rating for the restaurant. Defaults to None.     exact (bool, optional): Exact match for name. Defaults to False.
     * Search
     */
    async searchSearchGet(requestParameters: SearchSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Place>> {
        const response = await this.searchSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
